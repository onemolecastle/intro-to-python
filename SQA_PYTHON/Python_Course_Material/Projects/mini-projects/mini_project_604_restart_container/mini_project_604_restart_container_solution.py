"""
PROJECT ID: 604

Title: Check Webiste Status and Restart Docker Containers If Website Is Down

Objective
    Create a Python script that monitors the availability of a website and restarts Docker containers if the website is down. The script should also log the incident details locally.
    The script would run on the same server where the website/docker is running. It would be scheduled to run every X minutes to monitory the site.

Requirements
1. Website Monitoring:
   - The script should make an HTTP GET request to http://demostore.supersqa.com/.
   - It should check the status code and parse the content to verify the page loaded correctly.
   - The script should look for a specific element in the page content to confirm the correct page loaded.

2. Error Handling:
   - If the website is down (i.e., the status code is not 200 or the expected element is not found in the content):
   - Restart the Docker containers my_mysql_container and my_wordpress_container.
   - Log the incident details including the timestamp, status code, and the response text.

3. Logging:
   - The script should create a text file with the incident details.
   - The log file should be saved in the same directory where the script exists.
   - Each log file should have a unique name based on the timestamp of the incident.

   

Deliverables
1. Python Script:
   - A Python script that performs the above tasks.
   - The script should use the requests library for making HTTP requests and the subprocess module for restarting Docker containers.

2. Log Files:
    - Sample log files generated by the script.

Notes & Tips:
    - Since the site us up but the script needs to handle it when it is donw, you can simulate a failure by using any random subdomain.
    - The functions to be implemented are provided. But feel free to use your own design. This is just a guide and not requirement to use the function.
      But the provided solution will use the functions outlined here.
"""

import requests
from datetime import datetime
import subprocess
import os

# Configuration
url = "http://demostore.supersqa.com/"
#url  = "http://abcdefg.supersqa.com/"  # use to test failure

verification_text = '<a href="http://demostore.supersqa.com/" rel="home">Demo eCom Store</a>'
containers = ["my_mysql_container", "my_wordpress_container"]

log_dir = os.path.dirname(os.path.abspath(__file__))

def check_website(body_text_to_check):
    """
    Function to check the availability of a website.

    Returns:
        bool: True if the website is up, False otherwise.
        int: The status code of the response.
        str: The response text.
    """
    try:
        print(f"Making get request to: {url}")
        response = requests.get(url)
        print(f"Status code is: {response.status_code}")
        print(f"Checking if the text {body_text_to_check} apears in the response body.")

        if response.status_code == 200 and body_text_to_check in response.text:
            return True, response.status_code, response.text
        else:
            return False, response.status_code, response.text
    except Exception as e:
        print(f"Exception happened: {e}")
        return False, None, str(e)

def restart_containers():
    """
    Function to restart Docker containers.
    """
    print(f"Restarting docker containers: {containers}")
    for container in containers:
        try:
            command_to_execute = ["docker", "restart", container]
            print(f"Executing command: {command_to_execute}")
            # subprocess.run(command_to_execute, check=True)  # if you were running it in the real machine this would be executed
        except Exception as e:
            print(f"Exception happened trying to restart containers. Exception: {e}")
            raise
    print(f"Done restarting containers.")

def log_issue(status_code, text):
    """
    Function to log the incident details.

    Args:
        status_code (int): The status code of the response.
        text (str): The response text.
    """
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    log_file = os.path.join(log_dir, f"issue_{timestamp}.txt")
    with open(log_file, "w") as file:
        file.write(f"Timestamp: {timestamp}\n")
        file.write(f"Status Code: {status_code}\n")
        file.write(f"Response Text: {text}\n")

def main():
    """
    Main function to check the website status and restart containers if needed.
    """
    
    print(f"Stargint to check status of site: {url}")

    is_up, status_code, text = check_website(verification_text)

    if not is_up:
        print(f"The site is NOT up. Restarting conainers.")
        restart_containers()
        log_issue(status_code, text)
    else:
        print(f"The site is up and running. Nothing to do.")

        
if __name__ == "__main__":
    main()